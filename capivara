#!/usr/bin/env node

const prog = require('caporal');
const ora = require('ora');
const inquirer = require('inquirer');
const exec = require('child_process').exec;
const replace = require("replace");
const version = require('./package.json').version;
const getos = require('getos');
const { getInstalledPath } = require('get-installed-path');
const fs = require('fs');

prog
.version(version)
.command('init',   'Crie um novo componente')
.argument('[name]', 'Nome do componente')
.action((args, options, logger) => {

    if(!args.name){
        inquirer.prompt([
            {
                type: 'input',
                message: 'Nome do componente..: ',
                name: 'name',
                validate: function(input){
                    let done = this.async();
                    if(!input){
                        done('Por favor, preencha o nome do componente.');
                        return;
                    }
                    done(null, true);
                }
            }
        ]).then(answers => {
            generate(answers);
        })
    }else{
        generate(args);
    }

});

const replaceComponente = (regex, replacement, dir) => {
    replace({
        regex: regex,
        replacement: replacement,
        paths: [dir],
        recursive: true,
        silent: true,
    });
}

const replaceAll = (str, needle, replacement) => str.split(needle).join(replacement);

const getComponentName = (str) => {
    let string = str.charAt(0).toUpperCase() + str.slice(1);
    var regex = new RegExp(/([a-z])([A-Z])/g);
    var replacement = "$1-$2";
    return string.replace(regex, replacement);
}

const getClassName = (answers) => {
    return `Capivara${replaceAll(answers.name, '-', '')}`;
}

const deleteFolderRecursive = (path) => {
    if (fs.existsSync(path)) {
        fs.readdirSync(path).forEach(function(file, index){
        var curPath = path + "/" + file;
        if (fs.lstatSync(curPath).isDirectory()) {
            deleteFolderRecursive(curPath);
        } else {
            fs.unlinkSync(curPath);
        }
        });
        fs.rmdirSync(path);
    }
}

const generate = (answers) => {
    answers.name = getComponentName(answers.name);
    const spinner = ora('Gerando componente...').start();
    exec(`git clone https://github.com/CapivaraJS/capivara-archetype.git capivara-${answers.name.toLowerCase()}`, {maxBuffer: Infinity}, 
    function (error, stdout, stderr) {     
        if (error !== null) {
            spinner.fail(`Problemas ao gerar seu componente. \n ${error}`);            
        } else {
            replaceComponente('archetype', answers.name.toLowerCase(), `capivara-${answers.name.toLowerCase()}`);
            replaceComponente('project-name', answers.name.toLowerCase(), `capivara-${answers.name.toLowerCase()}`);
            replaceComponente('ProjectName', `${getClassName(answers)}`, `capivara-${answers.name.toLowerCase()}`);
            exec(`renamer --find 'project-name' --replace '${answers.name.toLowerCase()}' '**'`, {maxBuffer: Infinity}, () => {
                deleteFolderRecursive(`capivara-${answers.name.toLowerCase()}/.git`);
                executeNpmInstall(spinner, answers);
            });            
        }                    
    });

}

const executeNpmInstall = (spinner, answers) => {
    spinner.text = 'npm install';
    exec(`cd capivara-${answers.name.toLowerCase()} && npm install`, {maxBuffer: Infinity}, () => {
        spinner.stop();
        finish(spinner);
    }); 
}

const finish = (spinner) => {
    spinner.succeed(`Seu novo componente foi gerado com sucesso.`);
    process.exit();
}

getInstalledPath('renamer').then(pathRenamer => {
    prog.parse(process.argv);
}).catch(() => {
    getos(function(e,os) {
        let command = 'npm install renamer -g';
        const spinner = ora(command).start();
        if(os.os == 'linux'){
            command = 'sudo ' + command;
        }
        exec(command, {maxBuffer: Infinity}, () => {
            spinner.stop();
            prog.parse(process.argv);
        });        
    });
})
